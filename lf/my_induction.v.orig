From LF Require Export Basics.

Theorem add_0_r : forall n:nat, n + 0 = n.
Proof.
intros n.
induction n.
reflexivity.
rewrite <- IHn.
simpl.
rewrite IHn.
rewrite IHn.
reflexivity.
Qed.

Theorem minus_n_n : forall n,
  minus n n = 0.
Proof.
intros n.
induction n.
reflexivity.
simpl.
rewrite IHn.
reflexivity.
Qed.

Theorem mul_0_r : forall n:nat,
  n * 0 = 0.
Proof.
induction n.
reflexivity.
simpl.
rewrite IHn.
reflexivity.
Qed.

Theorem plus_n_Sm : forall n m : nat,
  S (n + m) = n + (S m).
Proof.
intros.
induction n.
simpl.
reflexivity.
simpl.
rewrite <- IHn.
reflexivity.
Qed.

Theorem add_comm : forall n m : nat,
  n + m = m + n.
Proof.
intros.
induction n.
simpl.
rewrite add_0_r.
reflexivity.
simpl.
rewrite IHn.
rewrite plus_n_Sm.
reflexivity.
Qed.

Theorem add_assoc : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof.
intros.
induction n.
simpl.
reflexivity.
simpl.
rewrite IHn.
reflexivity.
Qed.

Fixpoint double (n:nat) :=
  match n with
  | O => O
  | S n' => S (S (double n'))
  end.

Lemma double_plus : forall n, double n = n + n.
Proof.
intros n.
induction n.
simpl.
reflexivity.
simpl.
rewrite IHn.
rewrite plus_n_Sm.
reflexivity.
Qed.

Theorem even_S : forall n : nat,
  even (S n) = negb (even n).
Proof.
intros n.
induction n.
simpl.
reflexivity.
rewrite IHn.
rewrite negb_involutive.
simpl.
reflexivity.
Qed.

Theorem add_shuffle3 : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
intros.
rewrite add_assoc.
rewrite add_assoc.
assert (H: n + m = m + n).
{rewrite add_comm.
reflexivity.
}
rewrite H.
reflexivity.
Qed.

Theorem mul_comm : forall m n : nat,
  m * n = n * m.
Proof.
intros.
induction n.
simpl.
rewrite <- mult_n_O.
reflexivity.
rewrite <- mult_n_Sm.
rewrite IHn.
simpl.
rewrite add_comm.
reflexivity.
Qed.

Theorem leb_refl : forall n:nat,
  (n <=? n) = true.
Proof.
intros.
induction n.
simpl.
reflexivity.
simpl.
assumption.
Qed.

Theorem zero_neqb_S : forall n:nat,
  0 =? (S n) = false.
Proof.
intros.
destruct n.
simpl.
reflexivity.
simpl.
reflexivity.
Qed.

Theorem andb_false_r : forall b : bool,
  andb b false = false.
Proof.
intros.
destruct b.
simpl.
reflexivity.
simpl.
reflexivity.
Qed.

Lemma le_impl_plus_1_le : forall n m : nat,
  n <=? m = true -> S n <=? S m = true.
intros.
assumption.
Qed.

Theorem plus_leb_compat_l : forall n m p : nat,
  n <=? m = true -> (p + n) <=? (p + m) = true.
Proof.
intros.
induction p.
simpl.
assumption.
assert (H1: S p + n = n + S p). { rewrite add_comm. reflexivity. }
assert (H2: S p + m = m + S p). { rewrite add_comm. reflexivity. }
rewrite H1, H2.
rewrite <- plus_n_Sm.
rewrite <- plus_n_Sm.
assert (H3: p + n = n + p). {rewrite add_comm. reflexivity. }
assert (H4: p + m = m + p). {rewrite add_comm. reflexivity. }
rewrite <- H3, <- H4.
pose proof (le_impl_plus_1_le (p + n) (p + m)) as H5.
pose proof (H5 IHp) as H6.
assumption.
Qed.

Theorem S_neqb_0 : forall n:nat,
  (S n) =? 0 = false.
Proof.
intros.
simpl.
reflexivity.
Qed.

Theorem mult_1_l : forall n:nat, 1 * n = n.
Proof.
intros.
simpl.
rewrite add_0_r.
reflexivity.
Qed.

Theorem all3_spec : forall b c : bool,
  orb
    (andb b c)
    (orb (negb b)
         (negb c))
  = true.
Proof.
intros.
case b.
case c.
simpl.
reflexivity.
simpl.
reflexivity.
simpl.
reflexivity.
Qed.

Theorem mul_n_Sm : forall m n : nat,
  n * S m = n * m + n.
Proof.
intros.
induction n.
simpl.
reflexivity.
simpl.
rewrite plus_n_Sm.
rewrite IHn.
rewrite plus_n_Sm.
rewrite add_assoc.
reflexivity.
Qed.

Require Import Lia.

(* TODO: see if this can be proved without using lia *)
Theorem mult_plus_distr_r : forall n m p : nat,
  (n + m) * p = (n * p) + (m * p).
Proof.
intros.
induction p.
rewrite mul_0_r.
rewrite mul_0_r.
rewrite mul_0_r.
simpl.
reflexivity.
rewrite mul_n_Sm.
rewrite IHp.
rewrite mul_n_Sm.
rewrite mul_n_Sm.
rewrite add_assoc.
rewrite add_assoc.
lia.
Qed.

(* TODO: see if this can be proved without using lia *)
Theorem mult_assoc : forall n m p : nat,
  n * (m * p) = (n * m) * p.
Proof.
intros.
induction p.
repeat rewrite mul_0_r.
reflexivity.
repeat rewrite mul_n_Sm.
lia.
Qed.

Theorem eqb_refl : forall n : nat,
  (n =? n) = true.
Proof.
intros.
induction n.
reflexivity.
assumption.
Qed.

Theorem add_shuffle3' : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
intros.
rewrite add_assoc.
rewrite add_assoc.
replace (n + m) with (m + n).
reflexivity.
rewrite add_comm.
reflexivity.
Qed.

Inductive bin : Type :=
  | Z
  | B0 (n : bin)
  | B1 (n : bin).

(* copied from basics.v *)
Fixpoint incr (m:bin) : bin :=
match m with
| Z => B1 Z
| B0 n => B1 n
| B1 Z => B0 (B1 Z)
| B1 (B0 n) => B0 (B1 n)
| B1 (B1 n) => B0 (B0 (incr n))
end.

(* copied from basics.v *)
Fixpoint bin_to_nat (m:bin) : nat :=
match m with
| Z => O
| B0 n => 2 * (bin_to_nat n)
| B1 n => (2 * (bin_to_nat n)) + 1
end.

Theorem plus_1_eq_S : forall n : nat,
  S n = n + 1.
intros.
lia.
Qed.

Theorem bin_to_nat_pres_incr : forall m : bin,
  bin_to_nat (incr m) = S (bin_to_nat m).
Proof.
intros.
case m.
simpl.
reflexivity.
intros.
simpl.
rewrite add_0_r.
rewrite plus_n_Sm.
pose proof (plus_1_eq_S (bin_to_nat n)) as H.
rewrite H.
lia.
